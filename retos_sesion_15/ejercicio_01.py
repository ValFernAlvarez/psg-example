'''
1. Crea una calculadora interactiva que solicite dos n√∫meros por teclado y realice las operaciones de suma,
    resta, multiplicaci√≥n y divisi√≥n. El programa debe seguir solicitando dos n√∫meros hasta que se ingrese
    "salir". Se debe incluir el manejo de excepciones para evitar errores al ingresar datos no num√©ricos,
    al intentar dividir entre cero, o ante cualquier otro error inesperado.
'''
def calcular_operacion_basica (numero_1,numero_2,operacion):
    if operacion == "+":
        return numero_1 + numero_2
    elif operacion == "-":
        return numero_1 - numero_2
    elif operacion == "*":
        return numero_1 * numero_2
    elif operacion == "/":
        if numero_2 == 0:
            raise ZeroDivisionError("No se puede dividir entre cero.")
        return numero_1 / numero_2
    else:
        raise ValueError("Operaci√≥n inv√°lida. Usa '+', '-', '*', '/'.")
#---

#---
while True:
    try:
        numero_1_usr=input("Ingrese primer n√∫mero (o 'salir'): ").strip().lower()
        if numero_1_usr == "salir":
            break
        numero_2_usr=input("Ingrese segundo n√∫mero (o 'salir'): ").strip().lower()
        if numero_2_usr == "salir":
            break
        operacion_usr=input("Ingrese operaci√≥n ('+','-','*','/'): ").strip()
        numero_convertido_1=float(numero_1_usr)
        numero_convertido_2=float(numero_2_usr)
        resultado=calcular_operacion_basica(numero_convertido_1,numero_convertido_2,operacion_usr)
    except ValueError as e:
        print("\nüö´  Error de valor:", e, type(e))
    except ZeroDivisionError as e:
        print("\n0Ô∏è‚É£  Error:", e, type(e))
    except Exception as e:
        print("\nüíÄ  Error:", e, type(e))
    else:
        print(f"\nResultado: {round(resultado,2)}")